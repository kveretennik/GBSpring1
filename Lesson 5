Вопросы:

1. Использую последовательность, но id почему-то не генерируется.
2. При редактировании и добавлении продукта приходится явно проставлять enabledFlag(в базе по умолчанию TRUE). Как этого избежать?
3. При редактировании продукта id беру из пути, как редактировать по-другому, чтобы не показывать id?
4. Хотел обойтись одним файлом add-product.html для редактирования и добавления, но не смог сделать
   разные th:action для формы.
   Так не заработало: <form th:action="@{'/' + ${product.getProductName() == null ? 'add' : 'edit/' + ${product.productID}}}" th:object="${product}" method="post">
5. При ограничении по минимальной/максимальной цене первый запрос отрабатывает нормально, но
   при переходе по страницам поля очищаются и продукты не выводятся. Как поправить?

@Entity
@Table(schema = "test", name = "products")
public class Product {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "productNext")
    @SequenceGenerator(
            name = "productNext",
            schema = "test",
            sequenceName = "products_s"
    )

    @Column(name = "enabled_flag")
    private boolean enabledFlag;
...
}

INDEX.html
-------------------------------------------
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="ctx" th:content="${#httpServletRequest.getContextPath()}">
    <title>Магазин</title>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"></script>
</head>
<body>
    <div th:replace="~{navigation :: navi(Home)}"/>
    <div class="container">
        <br>
        <h1>Информация о продуктах</h1>

        <form class="form-inline" th:action="@{/find}" th:object="${minMaxSearch}" method="get">
            <label class="sr-only" for="inlineFormMinCost">Минимальная цена</label>
            <input type="number" class="form-control mb-2 mr-sm-2" id="inlineFormMinCost" placeholder="Min Cost" th:field="*{minCost}">


            <label class="sr-only" for="inlineFormMaxCost">Максимальная цена</label>
            <div class="input-group mb-2 mr-sm-2">
                <input type="number" class="form-control" id="inlineFormMaxCost" placeholder="Max Cost" th:field="*{maxCost}">
            </div>

            <button type="submit" class="btn btn-primary mb-2">Найти</button>
        </form>

        <span th:if="${products.getTotalPages() == 0}">Товаров нет</span>
        <div th:unless="${products.getTotalPages() == 0}">
            <table class="table table-hover">
                <thead class="thead-dark">
                <tr>
                    <th>ID</th>
                    <th>Наименование</th>
                    <th>Стоимость</th>
                    <th>Действия</th>
                </tr>
                </thead>
                <tbody>
                <tr th:each="product : ${products}">
                    <td th:text="${product.productID}"/>
                    <td th:text="${product.productName}"/>
                    <td th:text="${product.productCost}"/>
                    <td>
                        <!--<a th:href="@{'/edit/' + ${product.productID}}" th:text="Редактировать"/>-->
                        <a th:href="@{'/edit/' + ${product.productID}}" th:text="Редактировать"/>
                    </td>
                </tr>
                </tbody>
            </table>
            <nav aria-label="Page navigation example">
                <ul class="pagination">

                    <span th:if="${products.getNumber() > 0}">
                        <li class="page-item">
                            <a class="page-link" th:href="@{'?page='+${products.getNumber()-1}}">Previous</a>
                        </li>
                    </span>

                    <li class="page-item" th:each="i : ${#numbers.sequence(1, products.getTotalPages())}" th:classappend="${products.getNumber()+1 == i ? 'page-item active' : ''}">
                        <a class="page-link" th:text="${i}" th:href="@{'?page='+${i - 1}}"/>
                    </li>

                    <span th:if="${products.getNumber() < products.getTotalPages()-1}">
                        <li class="page-item">
                            <a class="page-link" th:href="@{'?page='+${products.getNumber()+1}}">Next</a>
                        </li>
                    </span>
                </ul>

            </nav>
        </div>
    </div>
</body>

ADD-PRODUCT.html
---------------------------
<!DOCTYPE html>

<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Добавить товар</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"></script>

    <meta name="ctx" th:content="${#httpServletRequest.getContextPath()}"/>
</head>

<html>
<body>
    <div th:replace="~{navigation :: navi(AddProduct)}"/>
    <div class="container">

        <form th:action="@{'/edit/' + ${product.productID}}" th:object="${product}" method="post">
        <!--<form th:action="@{'/' + ${product.getProductName() == null ? 'add' : 'edit/' + ${product.productID}}}" th:object="${product}" method="post">-->
            <div class="form-group">
                <label for="productTitle">Название</label>
                <input type="text" th:field="*{productName}" class="form-control" id="productTitle" placeholder="Введите название товара">
            </div>
            <div class="form-group">
                <label for="productCost">Цена</label>
                <input th:field="*{productCost}" type="text" class="form-control" id="productCost" placeholder="Введите цену товара">
            </div>
            <button type="submit" class="btn btn-primary">Сохранить</button>
        </form>
    </div>
</body>
</html>

--------------------------------------

public class MinMaxSearch {
    private float minCost;
    private float maxCost;

    public MinMaxSearch() {

    }

    public MinMaxSearch(Float minCost, Float maxCost) {
        if (minCost == null) {
            this.minCost = 0.0f;
        } else {
            this.minCost = minCost;
        }

        if (maxCost == null || maxCost == 0.0f) {
            this.maxCost = Float.MAX_VALUE;
        } else {
            this.maxCost = maxCost;
        }
    }

    public Float getMinCost() {
        return minCost;
    }

    public Float getMaxCost() {
        return maxCost;
    }

    public void setMinCost(Float minCost) {
        if (minCost == null) {
            this.minCost = 0.0f;
        } else {
            this.minCost = minCost;
        }
    }

    public void setMaxCost(Float maxCost) {
        if (maxCost == null || maxCost == 0.0f) {
            this.maxCost = Float.MAX_VALUE;
        } else {
            this.maxCost = maxCost;
        }
    }
}

-------------------------------------------

@Controller
public class MainController {

    private ProductService productService;

    @Autowired
    public void setProductService(ProductService productService) {
        this.productService = productService;
    }

    @GetMapping("/")
    public String showProductsPage(Model model, @RequestParam(name = "page", required = false) Integer page) {
        System.out.println("GetMapping /");
        if (page == null) page = 0;
        Page<Product> products = productService.findCostBetween(PageRequest.of(page, 5));
        model.addAttribute("products", products);
        model.addAttribute("minMaxSearch", new MinMaxSearch());
        return "index";
    }

    @GetMapping("/find")
    public String findProductsPage(Model model, @ModelAttribute MinMaxSearch minMaxSearch) {
        productService.setMinCost(minMaxSearch.getMinCost());
        productService.setMaxCost(minMaxSearch.getMaxCost());
        Page<Product> products = productService.findCostBetween(PageRequest.of(0, 5));
        model.addAttribute("products", products);
        return "index";
    }

    @GetMapping("/add")
    public String addProductPage(Model model) {
        Product product = new Product();
        model.addAttribute("product", product);
        return "add-product";
    }

    @PostMapping("/add")
    public String addProduct(Model model, @ModelAttribute("product") Product product) {
        product.setEnabledFlag(true);
        productService.saveOrUpdate(product);
        return "redirect:/";
    }

    @GetMapping("/edit/{id}")
    public String editProductPage(Model model, @PathVariable(name = "id") Long id) {
        Product product = productService.getStudentsById(id);
        model.addAttribute("product", product);
        return "add-product";
    }

    @PostMapping("/edit/{id}")
    public String saveEditedProduct(Model model, @ModelAttribute("product") Product product, @PathVariable(name = "id") Long id) {
        System.out.println(product.getProductID());
        System.out.println(product.getProductCost());
        product.setProductID(id);
        product.setEnabledFlag(true);
        productService.saveOrUpdate(product);
        return "redirect:/";
    }
}

----------------------------------------

@Service
public class ProductService {

    private Float minCost;
    private Float maxCost;

    private ProductRepository productRepository;

    ProductService() {
        minCost = 0f;
        maxCost = Float.MAX_VALUE;
    }

    ...

    public Page<Product> findCostBetween(Pageable pageable) {
        return productRepository.findAllByEnabledFlagIsTrueAndProductCostBetween(minCost, maxCost, pageable);
    }

    public Product saveOrUpdate(Product product) {
        return productRepository.save(product);
    }

    public Product getProductById(Long id) {
        return productRepository.findById(id).orElse(null);
    }
}